/*
 * MilanoGreen BackEnd
 * API for the web site of the Volunteering Association MilanoGreen, containing the staff of the associations and the organized events
 *
 * OpenAPI spec version: 2.0.0
 * Contact: samuele.milanesi@mail.polimi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/People', 'model/Service'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/People'), require('../model/Service'));
  } else {
    // Browser globals (root is window)
    if (!root.MilanoGreenBackEnd) {
      root.MilanoGreenBackEnd = {};
    }
    root.MilanoGreenBackEnd.ServiceApi = factory(root.MilanoGreenBackEnd.ApiClient, root.MilanoGreenBackEnd.Event, root.MilanoGreenBackEnd.People, root.MilanoGreenBackEnd.Service);
  }
}(this, function(ApiClient, Event, People, Service) {
  'use strict';

  /**
   * Service service.
   * @module api/ServiceApi
   * @version 2.0.0
   */

  /**
   * Constructs a new ServiceApi. 
   * @alias module:api/ServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the serviceGET operation.
     * @callback module:api/ServiceApi~serviceGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Service of MilanoGreen association
     * All the specific Services provided by the Association MilanoGreen, they are characterized by a title and a description. Moreover, they have related Events and People in charge of them.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of displayable Services per page
     * @param {Number} opts.offset Pagination offset, default is 0
     * @param {module:api/ServiceApi~serviceGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    this.serviceGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Service];

      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceServiceIdGET operation.
     * @callback module:api/ServiceApi~serviceServiceIdGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the Service by its ID (identifier)
     * Returns one of the specific 6 services, allows us to access a page of the specific service
     * @param {Number} serviceId ID of service to be returned
     * @param {module:api/ServiceApi~serviceServiceIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    this.serviceServiceIdGET = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceServiceIdGET");
      }


      var pathParams = {
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Service;

      return this.apiClient.callApi(
        '/service/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceServiceIdRelatedEventsGET operation.
     * @callback module:api/ServiceApi~serviceServiceIdRelatedEventsGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect Service to its Events
     * Get the events related to a service
     * @param {Number} serviceId ID of the service
     * @param {module:api/ServiceApi~serviceServiceIdRelatedEventsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.serviceServiceIdRelatedEventsGET = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceServiceIdRelatedEventsGET");
      }


      var pathParams = {
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/service/{serviceId}/related_events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceServiceIdRelatedPeopleGET operation.
     * @callback module:api/ServiceApi~serviceServiceIdRelatedPeopleGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/People} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect Service to its People
     * Get the people related to a service
     * @param {Number} serviceId ID of the service
     * @param {module:api/ServiceApi~serviceServiceIdRelatedPeopleGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/People}
     */
    this.serviceServiceIdRelatedPeopleGET = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceServiceIdRelatedPeopleGET");
      }


      var pathParams = {
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = People;

      return this.apiClient.callApi(
        '/service/{serviceId}/related_people', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
