/*
 * MilanoGreen BackEnd
 * API for the web site of the Volunteering Association MilanoGreen, containing the staff of the associations and the organized events
 *
 * OpenAPI spec version: 2.0.0
 * Contact: samuele.milanesi@mail.polimi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Service'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Service'));
  } else {
    // Browser globals (root is window)
    if (!root.MilanoGreenBackEnd) {
      root.MilanoGreenBackEnd = {};
    }
    root.MilanoGreenBackEnd.EventApi = factory(root.MilanoGreenBackEnd.ApiClient, root.MilanoGreenBackEnd.Event, root.MilanoGreenBackEnd.Service);
  }
}(this, function(ApiClient, Event, Service) {
  'use strict';

  /**
   * Event service.
   * @module api/EventApi
   * @version 2.0.0
   */

  /**
   * Constructs a new EventApi. 
   * @alias module:api/EventApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the eventEventIdGET operation.
     * @callback module:api/EventApi~eventEventIdGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the event by its ID (identifier)
     * Returns an event, allows us to access a page of the specific event
     * @param {Number} eventId ID of event to be returned
     * @param {module:api/EventApi~eventEventIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.eventEventIdGET = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventEventIdGET");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/event/{eventId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventEventIdRelatedServicesGET operation.
     * @callback module:api/EventApi~eventEventIdRelatedServicesGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect Event to its Services
     * Get the Services related to an Event
     * @param {Number} eventId ID of the event
     * @param {module:api/EventApi~eventEventIdRelatedServicesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    this.eventEventIdRelatedServicesGET = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventEventIdRelatedServicesGET");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Service;

      return this.apiClient.callApi(
        '/event/{eventId}/related_services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsGET operation.
     * @callback module:api/EventApi~eventsGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Events organized by MilanoGreen
     * All the Events organized by the association, will specify the date of the event (including the month), the specific Service to which they are associated and the Person who is in charge of the organization of the Event.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of displayable Events per page
     * @param {Number} opts.offset Pagination offset, default is 0
     * @param {module:api/EventApi~eventsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.eventsGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
