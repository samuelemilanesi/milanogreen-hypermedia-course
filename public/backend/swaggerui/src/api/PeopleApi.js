/*
 * MilanoGreen BackEnd
 * API for the web site of the Volunteering Association MilanoGreen, containing the staff of the associations and the organized events
 *
 * OpenAPI spec version: 2.0.0
 * Contact: samuele.milanesi@mail.polimi.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/People', 'model/Service'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/People'), require('../model/Service'));
  } else {
    // Browser globals (root is window)
    if (!root.MilanoGreenBackEnd) {
      root.MilanoGreenBackEnd = {};
    }
    root.MilanoGreenBackEnd.PeopleApi = factory(root.MilanoGreenBackEnd.ApiClient, root.MilanoGreenBackEnd.Event, root.MilanoGreenBackEnd.People, root.MilanoGreenBackEnd.Service);
  }
}(this, function(ApiClient, Event, People, Service) {
  'use strict';

  /**
   * People service.
   * @module api/PeopleApi
   * @version 2.0.0
   */

  /**
   * Constructs a new PeopleApi. 
   * @alias module:api/PeopleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the peopleGET operation.
     * @callback module:api/PeopleApi~peopleGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/People>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Staff of MilanoGreen
     * All the people working in the Staff of MilanoGreen. This will specify their Name and Surname, role in the Association, their Motto and information contacts, consisting in both e-mail address and mobile phone number.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of displayable People per page
     * @param {Number} opts.offset Pagination offset, default is 0
     * @param {module:api/PeopleApi~peopleGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/People>}
     */
    this.peopleGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [People];

      return this.apiClient.callApi(
        '/people', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the peoplePeopleIdGET operation.
     * @callback module:api/PeopleApi~peoplePeopleIdGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/People} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the Person by her ID (identifier)
     * Returns a person, allows us to access a page of the specific profile
     * @param {Number} peopleId ID of person to be returned
     * @param {module:api/PeopleApi~peoplePeopleIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/People}
     */
    this.peoplePeopleIdGET = function(peopleId, callback) {
      var postBody = null;

      // verify the required parameter 'peopleId' is set
      if (peopleId === undefined || peopleId === null) {
        throw new Error("Missing the required parameter 'peopleId' when calling peoplePeopleIdGET");
      }


      var pathParams = {
        'peopleId': peopleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = People;

      return this.apiClient.callApi(
        '/person/{peopleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the peoplePeopleIdRelatedEventsGET operation.
     * @callback module:api/PeopleApi~peoplePeopleIdRelatedEventsGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect Person to its Events
     * Get the events related to a person
     * @param {Number} peopleId ID of the person
     * @param {module:api/PeopleApi~peoplePeopleIdRelatedEventsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.peoplePeopleIdRelatedEventsGET = function(peopleId, callback) {
      var postBody = null;

      // verify the required parameter 'peopleId' is set
      if (peopleId === undefined || peopleId === null) {
        throw new Error("Missing the required parameter 'peopleId' when calling peoplePeopleIdRelatedEventsGET");
      }


      var pathParams = {
        'peopleId': peopleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/person/{peopleId}/related_events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the peoplePeopleIdRelatedServicesGET operation.
     * @callback module:api/PeopleApi~peoplePeopleIdRelatedServicesGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect Person to its Services
     * Get the services related to a person
     * @param {Number} peopleId ID of the person
     * @param {module:api/PeopleApi~peoplePeopleIdRelatedServicesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    this.peoplePeopleIdRelatedServicesGET = function(peopleId, callback) {
      var postBody = null;

      // verify the required parameter 'peopleId' is set
      if (peopleId === undefined || peopleId === null) {
        throw new Error("Missing the required parameter 'peopleId' when calling peoplePeopleIdRelatedServicesGET");
      }


      var pathParams = {
        'peopleId': peopleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Service;

      return this.apiClient.callApi(
        '/person/{peopleId}/related_services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
